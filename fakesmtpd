#!python


import argparse
import asyncore
import errno
import logging
import os
import smtpd
import tempfile


class FakeSMTPServer(smtpd.SMTPServer):
    def __init__(self, localaddr, path):
        smtpd.SMTPServer.__init__(self, localaddr, None)
        self.recipients = {}
        self.path = path

        self.logger = logging.getLogger('fakesmtpd')
        self.logger.info("SMTP server started")
        self.logger.info("Mail path %s", path)


    def process_message(self, peer, mailfrom, rcpttos, data):
        self.logger.info("Incoming mail from %s", mailfrom)
        for recipient in rcpttos:
            self.logger.info("Logging mail for %s", recipient)
            count = self.recipients.get(recipient, 0) + 1
            self.recipients[recipient] = count
            filename = "{}.{:d}.mail".format(recipient, count)
            path = os.path.join(self.path, filename)
            with open(path, 'w') as f:
                f.write(data)
                f.write('\n')


def fakesmtpd_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--host', default='localhost')
    parser.add_argument('-p', '--port', default=25)
    path = os.path.join(tempfile.gettempdir(),
                        'fakesmtpd{:d}'.format(os.getpid()))
    parser.add_argument('--path', default=path)
    parser.add_argument('--log')
    return parser


def main():
    parser = fakesmtpd_parser()
    args = parser.parse_args()

    logging.basicConfig(filename=args.log,
                        format='%(asctime)s:%(levelname)s:%(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        level=logging.DEBUG)

    try:
        os.mkdir(args.path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    server = FakeSMTPServer((args.host, args.port), args.path)
    asyncore.loop()


if __name__ == '__main__':
    main()
